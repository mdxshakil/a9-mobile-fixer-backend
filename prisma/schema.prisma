generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  role     USER_ROLE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?

  @@map("users")
}

model Profile {
  id             String @id @default(uuid())
  firstName      String
  lastName       String
  profilePicture String
  contactNo      String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[]
  cart      Cart[]
  bookings  Booking[]

  @@map("profiles")
}

model Blog {
  id          String @id @default(uuid())
  title       String
  description String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogs")
}

model Faq {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Service {
  id          String           @id @default(uuid())
  title       String
  description String
  image       String
  cost        Int
  category    SERVICE_CATEGORY
  slotsPerDay Int
  status      SERVICE_STATUS   @default(live)
  reviews     Reviews[]
  ratings     Rating[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Cart      Cart[]
  bookings  Booking[]

  @@map("services")
}

model Reviews {
  id      String @id @default(uuid())
  comment String

  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Rating {
  id          String   @id @default(uuid())
  ratingValue Int
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ratings")
}

model Cart {
  id String @id @default(uuid())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id String @id @default(uuid())

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  bookingTime String

  status BOOKING_STATUS @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String @id @default(uuid())
  content   String
  profileId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@map("notifications")
}

enum USER_ROLE {
  admin
  super_admin
  user
}

enum SERVICE_STATUS {
  upcoming
  live
}

enum SERVICE_CATEGORY {
  display
  speaker
  battery
  backshell
  microphone
  charger
  camera
}

enum BOOKING_STATUS {
  pending
  rejected
  completed
}
